package graph.standard;

import java.util.Objects;

/**
 * A link between two nodes
 * @author CreeperStone72
 */
public class Link {
    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Attributes /////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * The extremities of the link
     */
    private Node<?> x, y;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Constructors ///////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Main constructor
     * @param x is the starting node
     * @param y is the ending node
     */
    public Link(Node<?> x, Node<?> y) {
        setX(x);
        setY(y);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Setters ////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public void setX(Node<?> x) { this.x = x; }

    public void setY(Node<?> y) { this.y = y; }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Getters ////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    public Node<?> getX() { return x; }

    public Node<?> getY() { return y; }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Methods ////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * For non-oriented graphs, a (x, y) link is the same as a (y, x) link
     * @return the link's symmetrical
     */
    public Link getSymmetrical() { return new Link(getY(), getX()); }

    /**
     * Checks whether a link matches given nodes
     * @param x is the starting node
     * @param y is the ending node
     * @return true if both nodes match
     */
    public boolean matches(Node<?> x, Node<?> y) { return matchX(x) && matchY(y); }

    /**
     * Checks whether a link starts with a given node
     * @param x is the supposed starting node
     * @return true if the node matches
     */
    public boolean matchX(Node<?> x) { return Objects.equals(getX(), x); }

    /**
     * Checks whether a link ends with a given node
     * @param y is the supposed ending node
     * @return true of the node matches
     */
    public boolean matchY(Node<?> y) { return Objects.equals(getY(), y); }
}
